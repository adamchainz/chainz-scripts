#!/usr/bin/env python3
import argparse
import datetime as dt
import os
import re
import shutil
import subprocess

parser = argparse.ArgumentParser(
    description="""
    Run ffmpeg to convert all wavs to flacs.
    """
)
parser.add_argument('-r', '--recursive',
                    action='store_true',
                    help="Check recursively")

TRASH_DIR = os.path.expanduser("~/.Trash/")


def main():
    args = parser.parse_args()

    wav_re = re.compile(r'\.wav$', re.I)
    for wavfile in find_them(recursive=args.recursive):
        if not os.path.exists(wavfile):
            raise NameError(wavfile)
        flacfile = wav_re.sub('.flac', wavfile)
        print(wavfile)
        if os.path.exists(flacfile):
            continue
        convert(wavfile, flacfile)


def find_them(recursive=False):
    command = ['find', '.', '-iname', '*.wav']
    if not recursive:
        command.extend(['-depth', '1'])
    command.extend(['-print0'])

    names = subprocess.check_output(command, universal_newlines=True)
    for name in names.split('\0'):
        if name:
            yield name


def convert(wavfile, flacfile):
    return_code = subprocess.call([
        'ffmpeg',
        '-i', wavfile,
        flacfile,
        '-n',
        '-compression_level', '12',
        '-loglevel', '24',
    ])
    if return_code == 0:
        trashit(wavfile)
        if os.path.exists(flacfile + ".asd"):
            trashit(flacfile + ".asd")
        if os.path.exists(wavfile + ".asd"):
            shutil.move(wavfile + ".asd", flacfile + ".asd")


def trashit(filename):
    basen = os.path.basename(filename)
    trashed = os.path.join(TRASH_DIR, basen)
    if os.path.exists(trashed):
        name, ext = os.path.splitext(basen)
        date_bit = " ({})".format(dt.datetime.now().isoformat())
        trashed = os.path.join(TRASH_DIR, name + date_bit + ext)
    shutil.move(filename, trashed)


if __name__ == '__main__':
    main()
