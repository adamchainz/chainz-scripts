#!/usr/bin/env python
import argparse
import json
import subprocess
import sys

parser = argparse.ArgumentParser(
    prog="ec2-purge-image",
    description="Remove an AMI and all its related EBS snapshots."
)
parser.add_argument(
    '--dry-run',
    dest='dry_run',
    action='store_true',
    help="If set, will not delete anything, just output the commands that would be run."
)
parser.add_argument(
    'names',
    type=str,
    nargs='+',
    help="The AMI name(s) to purge"
)


def main():
    args = parser.parse_args(sys.argv[1:])
    names = args.names
    dry_run = args.dry_run

    for name in names:
        print("Purging {}...".format(name))
        result = purge_image(name, dry_run=dry_run)
        if len(names) == 1:
            return result

    return 0


def purge_image(name, dry_run=False):
    out = run_command(['aws', 'ec2', 'describe-images', '--filters', "Name=name,Values={}".format(name)])

    images = out['Images']
    try:
        image = images[0]
    except IndexError:
        print("AMI {} does not exist!".format(name))
        return 1

    run_command(['aws', 'ec2', 'deregister-image', '--image-id', image['ImageId']], not dry_run)

    for device in image['BlockDeviceMappings']:
        if 'Ebs' in device:
            run_command(['aws', 'ec2', 'delete-snapshot', '--snapshot-id', device['Ebs']['SnapshotId']], not dry_run)

    return 0


def run_command(command, run=True):
    print(' '.join(command))
    if not run:
        return
    else:
        out = subprocess.check_output(command)
        if out:
            return json.loads(out)


if __name__ == '__main__':
    sys.exit(main())
